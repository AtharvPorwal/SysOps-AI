python_libraries = [
    {
        "library": "numpy",
        "description": "Used for numerical computations in Python.",
        "usage": "import numpy as np\narr = np.array([1, 2, 3])",
        "explanation": "Provides support for arrays and matrices, along with mathematical functions to operate on them."
    },
    {
        "library": "pandas",
        "description": "Used for data manipulation and analysis.",
        "usage": "import pandas as pd\ndf = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})",
        "explanation": "Provides data structures like DataFrame and Series for handling structured data efficiently."
    },
    {
        "library": "matplotlib",
        "description": "Used for creating static, interactive, and animated visualizations.",
        "usage": "import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [4, 5, 6])\nplt.show()",
        "explanation": "A comprehensive library for creating visualizations like line plots, bar charts, and histograms."
    },
    {
        "library": "seaborn",
        "description": "Simplifies complex data visualization tasks.",
        "usage": "import seaborn as sns\nsns.scatterplot(x=[1, 2], y=[3, 4])",
        "explanation": "Built on top of matplotlib, it provides a high-level interface for attractive and informative visualizations."
    },
    {
        "library": "scikit-learn",
        "description": "Used for machine learning tasks.",
        "usage": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()",
        "explanation": "Offers tools for classification, regression, clustering, and dimensionality reduction."
    },
    {
        "library": "tensorflow",
        "description": "Used for deep learning and neural networks.",
        "usage": "import tensorflow as tf\nmodel = tf.keras.Sequential()",
        "explanation": "A powerful library for building and training machine learning models, especially neural networks."
    },
    {
        "library": "keras",
        "description": "Simplifies building deep learning models.",
        "usage": "from keras.models import Sequential\nmodel = Sequential()",
        "explanation": "An API running on top of TensorFlow for creating deep learning models more easily."
    },
    {
        "library": "flask",
        "description": "Used for building web applications.",
        "usage": "from flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello():\n    return 'Hello, World!'",
        "explanation": "A microframework for web development, ideal for small to medium web applications."
    },
    {
        "library": "django",
        "description": "Used for building large-scale web applications.",
        "usage": "django-admin startproject myproject",
        "explanation": "A high-level web framework that enables rapid development of secure and scalable web applications."
    },
    {
        "library": "requests",
        "description": "Used for making HTTP requests.",
        "usage": "import requests\nresponse = requests.get('https://api.example.com')",
        "explanation": "Simplifies sending HTTP requests and handling responses in Python."
    },
    {
        "library": "beautifulsoup4",
        "description": "Used for web scraping.",
        "usage": "from bs4 import BeautifulSoup\nsoup = BeautifulSoup('<html></html>', 'html.parser')",
        "explanation": "Parses HTML and XML documents, making it easy to extract and manipulate data from web pages."
    },
    {
        "library": "sqlalchemy",
        "description": "Used for database manipulation.",
        "usage": "from sqlalchemy import create_engine\nengine = create_engine('sqlite:///:memory:')",
        "explanation": "Provides an ORM (Object Relational Mapper) for working with databases using Python objects."
    },
    {
        "library": "pytest",
        "description": "Used for testing Python applications.",
        "usage": "def test_example():\n    assert 1 + 1 == 2",
        "explanation": "A testing framework that makes it easy to write and execute tests for your code."
    },
    {
        "library": "opencv-python",
        "description": "Used for image and video processing.",
        "usage": "import cv2\nimage = cv2.imread('image.jpg')",
        "explanation": "Provides tools for computer vision, including image manipulation and object detection."
    },
    {
        "library": "pytorch",
        "description": "Used for deep learning and tensor computations.",
        "usage": "import torch\ntensor = torch.tensor([1, 2, 3])",
        "explanation": "A flexible library for building machine learning models, with strong GPU support."
    },
    {
        "library": "xlrd",
        "description": "Used for reading Excel files.",
        "usage": "import xlrd\nworkbook = xlrd.open_workbook('file.xls')",
        "explanation": "Reads data from Excel spreadsheets."
    },
    {
        "library": "openpyxl",
        "description": "Used for Excel file manipulation.",
        "usage": "import openpyxl\nworkbook = openpyxl.load_workbook('file.xlsx')",
        "explanation": "Reads and writes Excel files in the .xlsx format."
    },
    {
        "library": "bokeh",
        "description": "Used for creating interactive visualizations.",
        "usage": "from bokeh.plotting import figure, show\np = figure()\np.line([1, 2, 3], [4, 5, 6])\nshow(p)",
        "explanation": "A library for creating interactive and web-ready visualizations."
    },
    {
        "library": "plotly",
        "description": "Used for interactive data visualizations.",
        "usage": "import plotly.express as px\nfig = px.line(x=[1, 2, 3], y=[4, 5, 6])\nfig.show()",
        "explanation": "Creates interactive and web-based visualizations with ease."
    },
    {
        "library": "nltk",
        "description": "Used for natural language processing.",
        "usage": "import nltk\nnltk.download('punkt')",
        "explanation": "Provides tools for text analysis, tokenization, stemming, and more."
    },
    {
        "library": "spacy",
        "description": "Used for advanced NLP tasks.",
        "usage": "import spacy\nnlp = spacy.load('en_core_web_sm')",
        "explanation": "A library for advanced natural language processing, including named entity recognition and tokenization."
    },
    {
        "library": "pyyaml",
        "description": "Used for working with YAML files.",
        "usage": "import yaml\ndata = yaml.safe_load('key: value')",
        "explanation": "Allows reading and writing YAML files."
    },
    {
        "library": "pytest-cov",
        "description": "Used for measuring code coverage in tests.",
        "usage": "pytest --cov=my_package",
        "explanation": "Integrates with pytest to generate code coverage reports."
    },
    {
        "library": "celery",
        "description": "Used for distributed task queues.",
        "usage": "from celery import Celery\napp = Celery('tasks')",
        "explanation": "Manages distributed asynchronous task execution."
    },
    {
        "library": "dash",
        "description": "Used for building web-based dashboards.",
        "usage": "import dash\napp = dash.Dash(__name__)",
        "explanation": "Creates interactive, data-driven dashboards."
    },
    {
        "library": "networkx",
        "description": "Used for the creation, manipulation, and study of complex networks.",
        "usage": "import networkx as nx\nG = nx.Graph()",
        "explanation": "Provides functions to work with graphs and networks."
    },
    {
        "library": "scipy",
        "description": "Used for scientific and technical computing.",
        "usage": "from scipy.stats import norm\nprint(norm.cdf(1.96))",
        "explanation": "Extends numpy with additional functionality for optimization, integration, and statistics."
    },
    {
        "library": "pyplot",
        "description": "Part of matplotlib for creating visualizations.",
        "usage": "import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [4, 5, 6])",
        "explanation": "Provides a simple way to create plots and visualizations."
    },
    {
        "library": "logging",
        "description": "Used for logging messages.",
        "usage": "import logging\nlogging.info('This is an info message')",
        "explanation": "A built-in library for logging debug and runtime information."
    },
    {
        "library": "argparse",
        "description": "Used for command-line argument parsing.",
        "usage": "import argparse\nparser = argparse.ArgumentParser()",
        "explanation": "Enables parsing of command-line arguments for Python scripts."
    },
    {
        "library": "json",
        "description": "Used for JSON data handling.",
        "usage": "import json\njson_data = json.dumps({'key': 'value'})",
        "explanation": "Provides functions to encode and decode JSON."
    },
    {
        "library": "time",
        "description": "Used for handling time-related operations.",
        "usage": "import time\ntime.sleep(2)",
        "explanation": "Provides functions for dealing with time and delays."
    },
    {
        "library": "datetime",
        "description": "Used for manipulating date and time.",
        "usage": "from datetime import datetime\nnow = datetime.now()",
        "explanation": "Offers classes for handling date and time operations."
    },
    {
        "library": "pickle",
        "description": "Used for serializing and deserializing Python objects.",
        "usage": "import pickle\npickle.dump(obj, file)",
        "explanation": "Allows saving and loading Python objects in binary format."
    },
    {
        "library": "shutil",
        "description": "Used for high-level file operations.",
        "usage": "import shutil\nshutil.copy('src.txt', 'dst.txt')",
        "explanation": "Provides functions for file and directory operations."
    },
    {
        "library": "os",
        "description": "Used for interacting with the operating system.",
        "usage": "import os\nos.listdir('.')",
        "explanation": "Provides functions for file and directory management."
    },
    {
        "library": "subprocess",
        "description": "Used for running system commands.",
        "usage": "import subprocess\nsubprocess.run(['ls', '-l'])",
        "explanation": "Enables running external processes and commands."
    },
    {
        "library": "threading",
        "description": "Used for concurrent execution of code.",
        "usage": "import threading\ndef run():\n    print('Thread running')\nth = threading.Thread(target=run)",
        "explanation": "Allows parallel execution of code in threads."
    },
    {
        "library": "multiprocessing",
        "description": "Used for parallel processing using processes.",
        "usage": "import multiprocessing\ndef worker():\n    print('Worker')",
        "explanation": "Enables parallel execution using multiple processes."
    },
    {
        "library": "functools",
        "description": "Provides higher-order functions.",
        "usage": "from functools import lru_cache\n@lru_cache\ndef compute(x):\n    return x*x",
        "explanation": "Contains utilities for functional programming."
    },
    {
        "library": "itertools",
        "description": "Used for efficient looping.",
        "usage": "import itertools\nfor comb in itertools.combinations([1, 2, 3], 2):",
        "explanation": "Provides tools for handling iterators and generators."
    },
    {
        "library": "collections",
        "description": "Provides specialized data types.",
        "usage": "from collections import Counter\ncounter = Counter(['a', 'b', 'a'])",
        "explanation": "Includes utilities like Counter, defaultdict, and OrderedDict."
    },
    {
        "library": "re",
        "description": "Used for regular expression matching.",
        "usage": "import re\nmatch = re.search(r'\\d+', 'abc123')",
        "explanation": "Offers support for pattern matching in strings."
    },
    {
        "library": "sqlite3",
        "description": "Used for interacting with SQLite databases.",
        "usage": "import sqlite3\nconn = sqlite3.connect('example.db')",
        "explanation": "Provides a lightweight database engine for Python."
    },
    {
        "library": "csv",
        "description": "Used for CSV file handling.",
        "usage": "import csv\nwith open('file.csv') as f:\n    reader = csv.reader(f)",
        "explanation": "Allows reading and writing of CSV files."
    },
    {
        "library": "asyncio",
        "description": "Used for asynchronous programming.",
        "usage": "import asyncio\nasync def main():\n    await asyncio.sleep(1)",
        "explanation": "Supports asynchronous I/O and event loops."
    }
]

# Example usage: Access the libraries in the dataset
for lib in python_libraries:
    print(f"Library: {lib['library']}\nDescription: {lib['description']}\nUsage:\n{lib['usage']}\nExplanation: {lib['explanation']}\n")
